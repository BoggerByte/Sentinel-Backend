// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: guild.sql

package db

import (
	"context"
)

const createOrUpdateGuild = `-- name: CreateOrUpdateGuild :one
INSERT INTO guild (discord_id, name, icon, owner_discord_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT (discord_id) DO UPDATE
    SET name=$2,
        icon=$3,
        owner_discord_id=$4
RETURNING id, discord_id, owner_discord_id, name, icon
`

type CreateOrUpdateGuildParams struct {
	DiscordID      int64  `json:"discord_id"`
	Name           string `json:"name"`
	Icon           string `json:"icon"`
	OwnerDiscordID int64  `json:"owner_discord_id"`
}

func (q *Queries) CreateOrUpdateGuild(ctx context.Context, arg CreateOrUpdateGuildParams) (Guild, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateGuild,
		arg.DiscordID,
		arg.Name,
		arg.Icon,
		arg.OwnerDiscordID,
	)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.OwnerDiscordID,
		&i.Name,
		&i.Icon,
	)
	return i, err
}

const deleteGuild = `-- name: DeleteGuild :exec
DELETE
FROM guild
WHERE discord_id = $1
`

func (q *Queries) DeleteGuild(ctx context.Context, discordID int64) error {
	_, err := q.db.ExecContext(ctx, deleteGuild, discordID)
	return err
}

const getGuild = `-- name: GetGuild :one
SELECT id, discord_id, owner_discord_id, name, icon
FROM guild
WHERE discord_id = $1
LIMIT 1
`

func (q *Queries) GetGuild(ctx context.Context, discordID int64) (Guild, error) {
	row := q.db.QueryRowContext(ctx, getGuild, discordID)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.OwnerDiscordID,
		&i.Name,
		&i.Icon,
	)
	return i, err
}

const getUserGuilds = `-- name: GetUserGuilds :many
SELECT coalesce(g.id, 0),
       ug.guild_discord_id AS discord_id,
       ug.permissions,
       coalesce(g.owner_discord_id, 0),
       coalesce(g.icon, '#'),
       coalesce(g.name, '')
FROM user_guild ug
         LEFT OUTER JOIN guild g ON g.discord_id = ug.guild_discord_id
WHERE ug.account_discord_id = $1
`

type GetUserGuildsRow struct {
	ID             int64  `json:"id"`
	DiscordID      int64  `json:"discord_id"`
	Permissions    int64  `json:"permissions"`
	OwnerDiscordID int64  `json:"owner_discord_id"`
	Icon           string `json:"icon"`
	Name           string `json:"name"`
}

func (q *Queries) GetUserGuilds(ctx context.Context, accountDiscordID int64) ([]GetUserGuildsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserGuilds, accountDiscordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserGuildsRow
	for rows.Next() {
		var i GetUserGuildsRow
		if err := rows.Scan(
			&i.ID,
			&i.DiscordID,
			&i.Permissions,
			&i.OwnerDiscordID,
			&i.Icon,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
