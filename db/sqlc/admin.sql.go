// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin (discord_id, username, discriminator, verified, email,
                   avatar, flags, banner, accent_color, public_flags)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, discord_id, username, discriminator, verified, email, avatar, flags, banner, accent_color, public_flags, created_at
`

type CreateAdminParams struct {
	DiscordID     string `json:"discord_id"`
	Username      string `json:"username"`
	Discriminator string `json:"discriminator"`
	Verified      bool   `json:"verified"`
	Email         string `json:"email"`
	Avatar        string `json:"avatar"`
	Flags         int64  `json:"flags"`
	Banner        string `json:"banner"`
	AccentColor   int64  `json:"accent_color"`
	PublicFlags   int64  `json:"public_flags"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.DiscordID,
		arg.Username,
		arg.Discriminator,
		arg.Verified,
		arg.Email,
		arg.Avatar,
		arg.Flags,
		arg.Banner,
		arg.AccentColor,
		arg.PublicFlags,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Username,
		&i.Discriminator,
		&i.Verified,
		&i.Email,
		&i.Avatar,
		&i.Flags,
		&i.Banner,
		&i.AccentColor,
		&i.PublicFlags,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE
FROM admin
WHERE id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, discord_id, username, discriminator, verified, email, avatar, flags, banner, accent_color, public_flags, created_at
FROM admin
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, id int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Username,
		&i.Discriminator,
		&i.Verified,
		&i.Email,
		&i.Avatar,
		&i.Flags,
		&i.Banner,
		&i.AccentColor,
		&i.PublicFlags,
		&i.CreatedAt,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, discord_id, username, discriminator, verified, email, avatar, flags, banner, accent_color, public_flags, created_at
FROM admin
ORDER BY id
OFFSET $2 LIMIT $1
`

type ListAdminsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAdmins(ctx context.Context, arg ListAdminsParams) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.DiscordID,
			&i.Username,
			&i.Discriminator,
			&i.Verified,
			&i.Email,
			&i.Avatar,
			&i.Flags,
			&i.Banner,
			&i.AccentColor,
			&i.PublicFlags,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
