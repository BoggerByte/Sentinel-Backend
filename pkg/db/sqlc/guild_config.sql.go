// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: guild_config.sql

package db

import (
	"context"
	"encoding/json"
)

const createOrUpdateGuildConfig = `-- name: CreateOrUpdateGuildConfig :one
INSERT INTO guild_config (id, json)
VALUES ((SELECT id
         FROM guild
         WHERE discord_id = $1), $2)
ON CONFLICT (id) DO UPDATE
    SET json = $2
RETURNING id, json, created_at
`

type CreateOrUpdateGuildConfigParams struct {
	DiscordID string          `json:"discord_id"`
	Json      json.RawMessage `json:"json"`
}

func (q *Queries) CreateOrUpdateGuildConfig(ctx context.Context, arg CreateOrUpdateGuildConfigParams) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateGuildConfig, arg.DiscordID, arg.Json)
	var i GuildConfig
	err := row.Scan(&i.ID, &i.Json, &i.CreatedAt)
	return i, err
}

const getGuildConfig = `-- name: GetGuildConfig :one
SELECT c.id, c.json, c.created_at
FROM guild g
         JOIN guild_config c ON g.id = c.id
WHERE g.discord_id = $1
`

func (q *Queries) GetGuildConfig(ctx context.Context, discordID string) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, getGuildConfig, discordID)
	var i GuildConfig
	err := row.Scan(&i.ID, &i.Json, &i.CreatedAt)
	return i, err
}

const getGuildsConfigs = `-- name: GetGuildsConfigs :many
SELECT c.id, c.json, c.created_at
FROM guild g
         JOIN guild_config c ON g.id = c.id
`

func (q *Queries) GetGuildsConfigs(ctx context.Context) ([]GuildConfig, error) {
	rows, err := q.db.QueryContext(ctx, getGuildsConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GuildConfig
	for rows.Next() {
		var i GuildConfig
		if err := rows.Scan(&i.ID, &i.Json, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tryCreateGuildConfig = `-- name: TryCreateGuildConfig :one
INSERT INTO guild_config (id, json)
VALUES ((SELECT id
         FROM guild
         WHERE discord_id = $1), $2)
ON CONFLICT (id) DO NOTHING
RETURNING id, json, created_at
`

type TryCreateGuildConfigParams struct {
	DiscordID string          `json:"discord_id"`
	Json      json.RawMessage `json:"json"`
}

func (q *Queries) TryCreateGuildConfig(ctx context.Context, arg TryCreateGuildConfigParams) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, tryCreateGuildConfig, arg.DiscordID, arg.Json)
	var i GuildConfig
	err := row.Scan(&i.ID, &i.Json, &i.CreatedAt)
	return i, err
}

const updateGuildConfig = `-- name: UpdateGuildConfig :exec
UPDATE guild_config c
SET json = $1
FROM guild g
WHERE c.id = g.id
  AND g.discord_id = $2
`

type UpdateGuildConfigParams struct {
	Json      json.RawMessage `json:"json"`
	DiscordID string          `json:"discord_id"`
}

func (q *Queries) UpdateGuildConfig(ctx context.Context, arg UpdateGuildConfigParams) error {
	_, err := q.db.ExecContext(ctx, updateGuildConfig, arg.Json, arg.DiscordID)
	return err
}
