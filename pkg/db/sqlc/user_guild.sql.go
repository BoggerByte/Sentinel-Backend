// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user_guild.sql

package db

import (
	"context"
)

const createOrUpdateUserGuildRel = `-- name: CreateOrUpdateUserGuildRel :one
INSERT INTO user_guild (guild_discord_id, account_discord_id, permissions)
VALUES ($1, $2, $3)
ON CONFLICT (guild_discord_id, account_discord_id) DO UPDATE
    SET permissions = $3
RETURNING account_discord_id, guild_discord_id, permissions
`

type CreateOrUpdateUserGuildRelParams struct {
	GuildDiscordID   string `json:"guild_discord_id"`
	AccountDiscordID string `json:"account_discord_id"`
	Permissions      int64  `json:"permissions"`
}

func (q *Queries) CreateOrUpdateUserGuildRel(ctx context.Context, arg CreateOrUpdateUserGuildRelParams) (UserGuild, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUserGuildRel, arg.GuildDiscordID, arg.AccountDiscordID, arg.Permissions)
	var i UserGuild
	err := row.Scan(&i.AccountDiscordID, &i.GuildDiscordID, &i.Permissions)
	return i, err
}

const createUserGuildRel = `-- name: CreateUserGuildRel :one
INSERT INTO user_guild (guild_discord_id, account_discord_id, permissions)
VALUES ($1, $2, $3)
RETURNING account_discord_id, guild_discord_id, permissions
`

type CreateUserGuildRelParams struct {
	GuildDiscordID   string `json:"guild_discord_id"`
	AccountDiscordID string `json:"account_discord_id"`
	Permissions      int64  `json:"permissions"`
}

func (q *Queries) CreateUserGuildRel(ctx context.Context, arg CreateUserGuildRelParams) (UserGuild, error) {
	row := q.db.QueryRowContext(ctx, createUserGuildRel, arg.GuildDiscordID, arg.AccountDiscordID, arg.Permissions)
	var i UserGuild
	err := row.Scan(&i.AccountDiscordID, &i.GuildDiscordID, &i.Permissions)
	return i, err
}

const getUserGuildRel = `-- name: GetUserGuildRel :one
SELECT account_discord_id, guild_discord_id, permissions
FROM user_guild
WHERE account_discord_id = $1
  AND guild_discord_id = $2
LIMIT 1
`

type GetUserGuildRelParams struct {
	AccountDiscordID string `json:"account_discord_id"`
	GuildDiscordID   string `json:"guild_discord_id"`
}

func (q *Queries) GetUserGuildRel(ctx context.Context, arg GetUserGuildRelParams) (UserGuild, error) {
	row := q.db.QueryRowContext(ctx, getUserGuildRel, arg.AccountDiscordID, arg.GuildDiscordID)
	var i UserGuild
	err := row.Scan(&i.AccountDiscordID, &i.GuildDiscordID, &i.Permissions)
	return i, err
}
