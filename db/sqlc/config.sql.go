// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: config.sql

package db

import (
	"context"
	"time"
)

const createConfig = `-- name: CreateConfig :one
INSERT INTO config (id, version, filename, created_at, guild_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, version, filename, created_at, guild_id
`

type CreateConfigParams struct {
	ID        int64     `json:"id"`
	Version   string    `json:"version"`
	Filename  string    `json:"filename"`
	CreatedAt time.Time `json:"created_at"`
	GuildID   int64     `json:"guild_id"`
}

func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, createConfig,
		arg.ID,
		arg.Version,
		arg.Filename,
		arg.CreatedAt,
		arg.GuildID,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Filename,
		&i.CreatedAt,
		&i.GuildID,
	)
	return i, err
}

const deleteConfig = `-- name: DeleteConfig :exec
DELETE
FROM config
WHERE id = $1
`

func (q *Queries) DeleteConfig(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, id)
	return err
}

const getConfig = `-- name: GetConfig :one
SELECT id, version, filename, created_at, guild_id
FROM config
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetConfig(ctx context.Context, id int64) (Config, error) {
	row := q.db.QueryRowContext(ctx, getConfig, id)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Filename,
		&i.CreatedAt,
		&i.GuildID,
	)
	return i, err
}

const listConfigs = `-- name: ListConfigs :many
SELECT id, version, filename, created_at, guild_id
FROM config
ORDER BY id
OFFSET $1 LIMIT $2
`

type ListConfigsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListConfigs(ctx context.Context, arg ListConfigsParams) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, listConfigs, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Filename,
			&i.CreatedAt,
			&i.GuildID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
